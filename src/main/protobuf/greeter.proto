syntax = "proto3";

//#options
option java_multiple_files = true;
option java_package = "akka_grpc";
option java_outer_classname = "HelloWorldProto";
// the generated code will be in package akka_grpc
// i.e. run "sbt compile" to generate: target/scala-2.12/src_managed/main/akka_grpc/GreeterService.scala, HelloRequest.scala, etc.

package helloworld;
//#options

//#services
////////////////////////////////////// The greeting service definition.
service GreeterService {
    //////////////////////
    // Sends a greeting //
    ////////*****/////////
    //      HELLO       //
    ////////*****/////////
    rpc SayHello (HelloRequest) returns (HelloReply) {}

    // Comment spanning
    // on several lines
    rpc ItKeepsTalking (stream HelloRequest) returns (HelloReply) {}

    /*
     * C style comments
     */
    rpc ItKeepsReplying (HelloRequest) returns (stream HelloReply) {}

    /* C style comments
     * on several lines
     * with non-empty heading/trailing line */
    rpc StreamHellos (stream HelloRequest) returns (stream HelloReply) {}
}
//#services
// the above definition will be generated as the following code:
// trait GreeterService {
//   def sayHello(in: example.myapp.helloworld.grpc.HelloRequest): scala.concurrent.Future[example.myapp.helloworld.grpc.HelloReply]
// }
// object GreeterService {
//   val name = "helloworld.GreeterService"
//   object Serializers { ... }
// }

//#messages
message Fields {
    string field1 = 1;
    string field2 = 2;
}
// The request message containing the user's name.
message HelloRequest {
    string name = 1;
    Fields fields = 2;
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
}
//#messages