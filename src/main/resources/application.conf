akka {
  loglevel = INFO // log level for Actor that extends with ActorLogging, ex. log.debug("message")
  // note: when starting the JVM, you can pass -Dkey=val directly to the java runtime (i.e. -Dakka.loglevel=DEBUG)
  // ex. after run "sbt universal:packageBin", execute "./akkaactor-0.1/bin/counter-example -Dakka.loglevel=DEBUG"
  //loggers = ["akka.event.slf4j.Slf4jLogger"]
  //logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.actor.deployment {
  /master2/router1 {          // specify actor's configuration via its path
    router = round-robin-pool // create router from a Pool (with a specific routing logic)
    nr-of-instances = 5       // the number of its routees
  }
}

akka.http.client.connecting-timeout = 500 ms

app {
  interface = "localhost"
  port = 9001
}

// for akka grpc server, enabling HTTP/2 in Akka HTTP
akka.http.server.preview.enable-http2 = on

// for akka grpc client
akka.grpc.client {
  "helloworld.GreeterService" {
    service-discovery {
      service-name = "GreeterService"
    }
    host = "localhost"
    port = 8080
    use-tls = false
    deadline = 1m
    user-agent = "Akka-gRPC"
  }
}

// for akka cluster
//akka {
//  actor {
//    provider = "cluster" // required
//  }
//  remote.artery {
//    canonical {
//      hostname = "127.0.0.1" // set a host/port for Akka remoting
//      port = 2551
//    }
//  }
//
//  cluster {
//    // the seed nodes are initial contact points for joining a cluster
//    seed-nodes = [ // define the seed nodes to join
//      "akka://ClusterSystem@127.0.0.1:2551",
//      "akka://ClusterSystem@127.0.0.1:2552"]
//  }
//}