// reference.conf vs. application.conf:
// reference.conf:
//   a file for library developers
//   all properties required by the library should be mentioned there and filled with reasonable default values when possible
// application.conf:
//   a file for application developers
//   a developer can set values for properties used by libraries in case they are not the same as defaults
//   also he/she can declare his own properties and refer them from the code


akka {
  loglevel = INFO // log level for Actor that extends with ActorLogging
  // note: when starting the JVM, you can pass -Dkey=val directly to the java runtime (i.e. -Dakka.loglevel=DEBUG)
  // ex. after run "sbt universal:packageBin", execute "./akkaactor-0.1/bin/counter-example -Dakka.loglevel=DEBUG"
  //loggers = ["akka.event.slf4j.Slf4jLogger"]
  //logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.actor.deployment {
  /master2/router1 {          // specify actor's configuration via its path
    router = round-robin-pool // create router from a Pool (with a specific routing logic)
    nr-of-instances = 5       // the number of its routees
  }
}

akka.http.client.connecting-timeout = 500 ms

app {
  interface = "localhost"
  port = 9001
}

// for akka grpc server, enabling HTTP/2 in Akka HTTP
akka.http.server.preview.enable-http2 = on

// for akka grpc client
akka.grpc.client {
  "helloworld.GreeterService" { // this should match the package & service we defined in greeter.proto
    service-discovery {
      service-name = "GreeterService"
    }
    host = "localhost" // this should match the interface we defined in GreeterServer.scala
    port = 8080 // this should match the port we defined in GreeterServer.scala
    use-tls = false
    deadline = 1m
    user-agent = "Akka-gRPC"
  }
}

// loads the extension at ActorSystem creation time
akka.library-extensions += akka_extensions.CountExtension
// because of this configuration, when "sbt run" the mainClass := Some("Akkaactor"), in which an ActorSystem is instantiated,
// the CountExtension is also instantiated automatically along with the ActorSystem and shared within that ActorSystem
